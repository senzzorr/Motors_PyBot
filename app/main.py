from telebot import types
import cfg
import keyboards
from os import path
import threading
import time

bot = cfg.telebot.TeleBot(cfg.BOT_TOKEN, parse_mode='HTML')
user_online = False

print('–ë–û–¢ –ó–ê–ü–£–©–ï–ù')

@bot.message_handler(commands=['start'])
def start(message):
    mesg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
    bot.register_next_step_handler(mesg, auth)



@bot.message_handler(content_types=['text'])
def auth(message):
    global user_online
    if not user_online:
        if message.text.isdigit():
            tabel = message.text
            user = cfg.select_user(tabel)
            if user is None: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ log_auth_var
                if cfg.check_user_true(tabel):
                    cfg.sign_up(str(message.chat.id), tabel)
                    bot.send_message(message.chat.id,text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user[0]}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup = keyboards.kb_main_menu())
                    user_online = True
                else:
                    bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É')
            elif user[2] == '': # –ï—Å–ª–∏ chat_id –ø—É—Å—Ç–æ–π
                if cfg.check_chat_id(str(message.chat.id)) == False:
                    cfg.add_chat_id(message.chat.id, tabel)
                    bot.send_message(message.chat.id,text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user[0]}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup = keyboards.kb_main_menu())
                    user_online = True
                else: bot.send_message(message.chat.id, text=f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è!')
            else:
                bot.send_message(message.chat.id,text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user[0]}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup = keyboards.kb_main_menu())
                user_online = True
        else:
            bot.send_message(message.chat.id, text='–¢–∞–±. –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!')
    else:
        menu_builder(message)


def menu_builder(message):
    global user_online
    if user_online:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if message.text == 'üîç –ü–æ–∏—Å–∫ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è':
            bot.send_message(message.chat.id, text='–ü–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é?', reply_markup = keyboards.search_criteria())

        elif message.text == 'üåê –û–±–∑–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π':
            bot.send_message(message.chat.id, text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.')

        elif message.text == '–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É':
            msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è.', reply_markup = keyboards.btn_back())
            bot.register_next_step_handler(msg, find_by_number)

        elif message.text == '–ü–æ–∏—Å–∫ –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏':
            msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –º–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç).', reply_markup = keyboards.btn_back())
            bot.register_next_step_handler(msg, find_by_power_first_step)

        elif message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text='–ù–∞–∑–∞–¥', reply_markup = keyboards.kb_main_menu())

        else: 
            bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')


def find_by_number(message):
    inv_num = message.text
    if inv_num.isdigit():
        vehicle = cfg.get_vehicle_by_number(inv_num)
        if vehicle is None:
            bot.send_photo(
                message.chat.id,
                photo=open(f'{path.join(path.dirname(__file__), cfg.get_image(vehicle[5]))}', 'rb'),
                caption=f'<b>–ò–Ω–≤. ‚Ññ: <u> F-{vehicle[0]} </u>\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <u> {vehicle[1]} </u>\n–ú–æ—â–Ω–æ—Å—Ç—å: <u> {vehicle[2]}–∫–í—Ç </u>\n–í–æ–ª—å—Ç–∞–∂: <u> {vehicle[3]}–í </u>\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <u> {vehicle[4]} </u>\n–°—Ç–∞—Ç—É—Å: <u> {vehicle[5]} </u></b>',
                reply_markup=keyboards.ikb_vehicle()
            )
            bot.send_message(message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup = keyboards.search_criteria())
        else: 
            msg = bot.send_message(message.chat.id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è. –ú–æ–∂–µ—Ç –≤—ã –æ—à–∏–±–ª–∏—Å—å?\n–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(msg, find_by_number)
    else:
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text='–ù–∞–∑–∞–¥', reply_markup = keyboards.kb_main_menu())
        else:
            msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            bot.register_next_step_handler(msg, find_by_number)


# –ì—Ä—É–ø–ø–∞ —Ñ—É–Ω–∫—Ü–∏–π(3) –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏ 
def find_by_power_first_step(message):
    global kw
    kw = message.text
    if kw.replace('.','',1).isdigit():
        msg = bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å—Ç–∞—Ç—É—Å', reply_markup = keyboards.kb_search_by_status())
        bot.register_next_step_handler(msg, find_by_power_second_step)
    else:
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text='–ù–∞–∑–∞–¥', reply_markup = keyboards.kb_main_menu())
        else:
            msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏!')
            bot.register_next_step_handler(msg, find_by_power_first_step)

def find_by_power_second_step(message):
    global status
    if message.text == '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ':
        status = 5
    elif message.text == '–í —Ä–µ–∑–µ—Ä–≤–µ':
        status = 1
    elif message.text == '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ':
        status = 10
    elif message.text == '–°–ø–∏—Å–∞–Ω–Ω—ã–µ':
        status = 6
    elif message.text == '–í—Å–µ':
        status = '*'
    else:
        status = 0

    find_by_power_final_step(message)

def find_by_power_final_step(message):
    if status != 0:
        vehicle_list = cfg.get_vehicle_by_power(kw, status)
        if vehicle_list is None:
            bot.send_message(message.chat.id, text=f'–°–ø–∏—Å–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –º–æ—â–Ω–æ—Å—Ç—å—é {kw} –∫–í—Ç:', reply_markup = keyboards.kb_main_menu())
            for vehicle in vehicle_list:
                bot.send_photo(
                    message.chat.id,
                    photo=open(f"{path.join(path.dirname(__file__), cfg.get_image(vehicle[5]))}", "rb"),
                    caption=f"<b>–ò–Ω–≤. ‚Ññ: <u> F-{vehicle[0]} </u>\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <u> {vehicle[1]} </u>\n–ú–æ—â–Ω–æ—Å—Ç—å: <u> {vehicle[2]}–∫–í—Ç </u>\n–í–æ–ª—å—Ç–∞–∂: <u> {vehicle[3]}–í </u>\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <u> {vehicle[4]} </u>\n–°—Ç–∞—Ç—É—Å: <u> {vehicle[5]} </u></b>",
                    reply_markup=keyboards.ikb_vehicle()
                )
        else: 
            bot.send_message(message.chat.id, text='–ù–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!', reply_markup = keyboards.kb_main_menu())
    else:
        msg = bot.send_message(message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
        bot.register_next_step_handler(msg, find_by_power_second_step)




@bot.callback_query_handler(func = lambda call: True)
def change_status(call):
    if call.data == 'mainmenu':
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.ikb_vehicle())

    if call.data == 'change_status':
        if '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' not in call.message.caption:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.vehicle_status_change(0))
        else:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.vehicle_status_change(1))

    if call.data == 'get_more':
        if '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' in call.message.caption:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.ikb_vehicle())
        else:
            get_more(call, call.message.message_id, call.message.caption)

    if user_online:
        if call.data == 'take_place':
            inv_num = call.message.caption.split()[2][2:]
            cfg.change_status(inv_num, 5)
            cfg.insert_history_status(inv_num, call.message.chat.id, 5, 1)
            bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" </u></b>')
       
        if call.data == 'repair':
            inv_num = call.message.caption.split()[2][2:]
            cfg.change_status(inv_num, 10)
            cfg.insert_history_status(inv_num, call.message.chat.id, 10, 1)
            bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ" </u></b>')

        if call.data == 'reserve':
            inv_num = call.message.caption.split()[2][2:]
            cfg.change_status(inv_num, 1)
            cfg.insert_history_status(inv_num, call.message.chat.id, 1, 1)
            bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–í —Ä–µ–∑–µ—Ä–≤–µ" </u></b>')

        if call.data == 'off':
            inv_num = call.message.caption.split()[2][2:]
            cfg.change_status(inv_num, 6)
            cfg.insert_history_status(inv_num, call.message.chat.id, 6, 1)
            bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–°–ø–∏—Å–∞–Ω" </u></b>')
    else: 
            bot.send_message(call.message.chat.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!\n\n–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ')


def get_more(call, message_id, old_text):  # –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    url = 'https://google.kz'
    more = f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {url}\nComing soon...'

    markup = types.InlineKeyboardMarkup()
    status_btn = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='change_status')
    markup.add(status_btn)

    media = types.InputMediaPhoto(open(f"{path.join(path.dirname(__file__), './img/engine1.jpg')}", "rb"),
                                  caption=old_text + '\n' + more)
    bot.edit_message_media(media , call.message.chat.id, message_id, reply_markup = markup)


def notify_admin(txt=None):  # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
    while True:
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
        admin_list = cfg.get_admins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", admin_list)

        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        txt = cfg.notification_message()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", txt)
        if txt is None:
            print("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–≥–∞ <br>. –ï—Å–ª–∏ –¥–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
        else:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
            for admin in admin_list:
                for m in txt:
                    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin[4]}:", m[0])
                    bot.send_message(admin[4], text=m[0])
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        print("–û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º...")
        time.sleep(15)


if __name__ == '__main__':
    t1 = threading.Thread(target=bot.polling)
    t2 = threading.Thread(target=notify_admin)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    print('–ë–û–¢ –ó–ê–ü–£–©–ï–ù')